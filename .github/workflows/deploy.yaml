name: Deploy Nginx Application

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kubernetes
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config
        kubectl cluster-info
        
    - name: Cleanup existing ingress-nginx
      run: |
        # Удаляем все ресурсы ingress-nginx если они существуют
        kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --ignore-not-found=true
        kubectl delete namespace ingress-nginx --ignore-not-found=true --timeout=30s
        sleep 10
        
    - name: Deploy Ingress Nginx
      run: |
        # Устанавливаем ingress-nginx
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
        
        # Ждем запуска
        sleep 30
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=180s
        
        # Настраиваем ingress-nginx на запуск на control-plane
        kubectl patch deployment ingress-nginx-controller -n ingress-nginx -p '{
          "spec": {
            "template": {
              "spec": {
                "nodeSelector": {
                  "ingress-ready": "true"
                }
              }
            }
          }
        }'
        
        # Ждем перезапуска
        kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=90s
        
        # Применяем наш NodePort сервис
        kubectl apply -f k8s/ingress-service.yaml
        
        # Проверяем что pod запущен на control-plane
        echo "=== Проверка размещения ingress-nginx ==="
        kubectl get pods -n ingress-nginx -o wide
        
    - name: Cleanup existing application
      run: |
        # Удаляем старые ресурсы приложения если они есть
        kubectl delete -f k8s/ingress.yaml --ignore-not-found=true
        kubectl delete -f k8s/service.yaml --ignore-not-found=true
        kubectl delete -f k8s/deployment.yaml --ignore-not-found=true
        kubectl delete configmap nginx-html --ignore-not-found=true
        sleep 5
        
    - name: Create ConfigMap from HTML files
      run: |
        # Создаем ConfigMap из папки html/
        kubectl create configmap nginx-html --from-file=html/ -o yaml --dry-run=client > k8s/configmap-generated.yaml
        kubectl apply -f k8s/configmap-generated.yaml
        
    - name: Deploy Application
      run: |
        # Применяем все манифесты
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
    - name: Wait for application to be ready
      run: |
        kubectl rollout status deployment/nginx-app --timeout=90s
        
    - name: Verify Setup
      run: |
        echo "=== Проверка ConfigMap ==="
        kubectl get configmap nginx-html -o yaml | head -20
        
        echo "=== Проверка Pods ==="
        kubectl get pods -A -o wide
        
        echo "=== Проверка Services ==="
        kubectl get svc -A
        
        echo "=== Проверка Ingress ==="
        kubectl get ingress -A
        
        echo "=== Проверка доступности ==="
        # Даем время для полной настройки
        sleep 10
        curl -v --retry 3 --retry-delay 5 http://185.8.22.53:30080/ | head -10 || echo "CURL failed, but continuing..."
        
    - name: Debug if needed
      if: failure()
      run: |
        echo "=== Debug Information ==="
        kubectl get nodes --show-labels
        echo "--- ingress-nginx pods ---"
        kubectl describe pods -n ingress-nginx
        echo "--- ingress-nginx service ---"
        kubectl describe svc -n ingress-nginx
        echo "--- nginx-app pods ---"
        kubectl describe pods -l app=nginx-app