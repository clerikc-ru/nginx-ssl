name: Deploy SSL Configuration

on:
  workflow_dispatch:  # –¢–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫

jobs:
  deploy-ssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Kubernetes
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
        mkdir -p ~/.kube
        echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config
        kubectl cluster-info
        
    - name: Cleanup existing cert-manager
      run: |
        echo "üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cert-manager..."
        kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml 2>/dev/null || true
        kubectl delete namespace cert-manager --wait=false 2>/dev/null || true
        sleep 30
        
    - name: Install cert-manager
      run: |
        echo "üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cert-manager..."
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ cert-manager..."
        # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è namespace
        sleep 30
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –í–°–ï–• –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ cert-manager
        echo "–û–∂–∏–¥–∞–µ–º cert-manager..."
        kubectl wait --namespace cert-manager \
          --for=condition=ready pod \
          --selector=app=cert-manager \
          --timeout=300s
          
        echo "–û–∂–∏–¥–∞–µ–º cert-manager-webhook..."
        kubectl wait --namespace cert-manager \
          --for=condition=ready pod \
          --selector=app=webhook \
          --timeout=300s
          
        echo "–û–∂–∏–¥–∞–µ–º cert-manager-cainjector..."
        kubectl wait --namespace cert-manager \
          --for=condition=ready pod \
          --selector=app=cainjector \
          --timeout=300s
          
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç
        sleep 10
        kubectl get pods -n cert-manager
        
        echo "‚úÖ cert-manager —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤"
        
    - name: Verify cert-manager webhook
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook cert-manager..."
        kubectl get validatingwebhookconfigurations
        kubectl get mutatingwebhookconfigurations
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ webhook –æ—Ç–≤–µ—á–∞–µ—Ç
        timeout 60s bash -c 'until kubectl get clusterissuer 2>/dev/null; do echo "–ñ–¥–µ–º webhook..."; sleep 5; done'
        
    - name: Deploy ClusterIssuer
      run: |
        echo "üìù –°–æ–∑–¥–∞–µ–º ClusterIssuer –¥–ª—è Let's Encrypt..."
        
        # –°–Ω–∞—á–∞–ª–∞ staging –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cat <<EOF | kubectl apply -f -
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-staging
        spec:
          acme:
            server: https://acme-staging-v02.api.letsencrypt.org/directory
            email: uppsikc@gmail.com  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
            privateKeySecretRef:
              name: letsencrypt-staging
            solvers:
            - http01:
                ingress:
                  class: nginx
        EOF
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ClusterIssuer —Å–æ–∑–¥–∞–Ω
        kubectl get clusterissuer
        kubectl describe clusterissuer letsencrypt-staging
        
    - name: Update Ingress with SSL
      run: |
        echo "üîß –û–±–Ω–æ–≤–ª—è–µ–º Ingress —Å SSL –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏..."
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π ingress –µ—Å–ª–∏ –µ—Å—Ç—å
        kubectl delete ingress nginx-ingress 2>/dev/null || true
        kubectl delete certificate clerikc-ru-tls 2>/dev/null || true
        kubectl delete secret clerikc-ru-tls 2>/dev/null || true
        
        sleep 10
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º ingress —Å STAGING issuer
        cat <<EOF | kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: nginx-ingress
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            cert-manager.io/cluster-issuer: "letsencrypt-staging"
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
        spec:
          tls:
          - hosts:
            - clerikc.ru
            secretName: clerikc-ru-tls
          rules:
          - host: "clerikc.ru"
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: nginx-service
                    port:
                      number: 80
        EOF
        
        echo "‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø—É—Å–∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
        sleep 30
        
    - name: Verify SSL Setup
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏..."
        
        echo "=== Ingress ==="
        kubectl get ingress
        
        echo "=== Certificates ==="
        kubectl get certificates -A
        
        echo "=== –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ==="
        kubectl describe certificate clerikc-ru-tls
        
        echo "=== –õ–æ–≥–∏ cert-manager ==="
        kubectl logs -l app=cert-manager -n cert-manager --tail=50
        
    - name: Monitor Certificate Status
      run: |
        echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
        
        # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–ø—É—Å–∫–∞
        for i in {1..30}; do
          STATUS=$(kubectl get certificate clerikc-ru-tls -o jsonpath="{.status.conditions[?(@.type=='Ready')].status}" 2>/dev/null || echo "Unknown")
          if [ "$STATUS" = "True" ]; then
            echo "üéâ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–æ—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–µ–Ω!"
            
            echo "=== –£—Å–ø–µ—Ö! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ prod ==="
            kubectl get certificate clerikc-ru-tls -o wide
            break
          elif [ "$STATUS" = "False" ]; then
            echo "‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã–ø—É—Å–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
            echo "=== –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ ==="
            kubectl describe certificate clerikc-ru-tls
            echo "=== –õ–æ–≥–∏ cert-manager ==="
            kubectl logs -l app=cert-manager -n cert-manager --tail=100
            echo "=== –õ–æ–≥–∏ webhook ==="
            kubectl logs -l app=webhook -n cert-manager --tail=100
            exit 1
          else
            echo "‚è≥ –°—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: $STATUS - –∂–¥–µ–º... ($i/30)"
            sleep 10
          fi
        done
        
        if [ "$STATUS" != "True" ]; then
          echo "‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—Ä—É—á–Ω—É—é"
          kubectl describe certificate clerikc-ru-tls
          kubectl get challenges,orders -A
        fi
        
    - name: Switch to Production (–µ—Å–ª–∏ staging —É—Å–ø–µ—à–µ–Ω)
      if: success()
      run: |
        echo "üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ production issuer..."
        
        # –°–æ–∑–¥–∞–µ–º production issuer
        cat <<EOF | kubectl apply -f -
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt-prod
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: uppsikc@gmail.com  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email
            privateKeySecretRef:
              name: letsencrypt-prod
            solvers:
            - http01:
                ingress:
                  class: nginx
        EOF
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ingress –Ω–∞ prod issuer
        kubectl annotate ingress nginx-ingress \
          cert-manager.io/cluster-issuer=letsencrypt-prod \
          --overwrite
          
        echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ production. –£–¥–∞–ª–∏—Ç–µ staging issuer –∫–æ–≥–¥–∞ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
        echo "kubectl delete clusterissuer letsencrypt-staging"